{"version":3,"sources":["../node_modules/accoutrement-init/sass/_root.scss","../node_modules/accoutrement-init/sass/_a11y.scss","style.css","../node_modules/accoutrement-init/sass/_forms.scss","../node_modules/accoutrement-init/sass/_media.scss","../node_modules/accoutrement-init/sass/_typography.scss","../node_modules/accoutrement-type/sass/_helpers.scss","config/_type.scss","style.scss","../node_modules/accoutrement-color/sass/_contrast.scss","config/_colors.scss","../node_modules/accoutrement-type/sass/_fonts.scss","../node_modules/accoutrement-scale/sass/_units.scss","config/_scale.scss","../node_modules/accoutrement-layout/sass/_queries.scss","../node_modules/accoutrement-layout/sass/_clearfix.scss","../node_modules/accoutrement-layout/sass/_stretch.scss","../node_modules/accoutrement-type/sass/_pseudo-elements.scss","../node_modules/accoutrement-scale/sass/_type.scss","../node_modules/accoutrement-color/sass/_utils.scss"],"names":[],"mappings":"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,EACX;;AN0SH;EM3SI,YAAU,EACX;;AN6SH;EM9SI,YAAU,EACX;;ANgTH;EMjTI,YAAU,EACX;;ANmTH;EMpTI,YAAU,EACX;;ANsTH;EMvTI,YAAU,EACX;;ANyTH;EM1TI,YAAU,EACX;;AN4TH;EM7TI,YAAU,EACX;;AN+TH;EMhUI,YAAU,EACX;;ANkUH;EMnUI,YAAU,EACX;;ANqUH;EMtUI,YAAU,EACX;;ANwUH;EMzUI,YAAU,EACX;;AN2UH;EM5UI,YAAU,EACX;;AN8UH;EM/UI,YAAU,EACX;;ANiVH;EMlVI,YAAU,EACX;;ANoVH;EMrVI,YAAU,EACX;;ANuVH;EMxVI,YAAU,EACX;;AN0VH;EM3VI,YAAU,EACX;;AN6VH;EM9VI,YAAU,EACX;;ANgWH;EMjWI,YAAU,EACX;;ANmWH;EMpWI,YAAU,EACX;;ANsWH;EMvWI,YAAU,EACX;;ANyWH;EM1WI,YAAU,EACX;;AN4WH;EM7WI,YAAU,EACX;;AN+WH;EMhXI,YAAU,EACX;;ANkXH;EMnXI,YAAU,EACX;;ANqXH;EMtXI,YAAU,EACX;;ANwXH;EMzXI,YAAU,EACX;;AN2XH;EM5XI,YAAU,EACX;;AN8XH;EM/XI,YAAU,EACX;;ANiYH;EMlYI,YAAU,EACX;;ANoYH;EMrYI,YAAU,EACX;;ANuYH;EMxYI,YAAU,EACX;;AN0YH;EM3YI,YAAU,EACX;;AN6YH;EM9YI,YAAU,EACX;;ANgZH;EMjZI,YAAU,EACX;;ANmZH;EMpZI,YAAU,EACX;;ANsZH;EMvZI,YAAU,EACX;;ANyZH;EM1ZI,YAAU,EACX;;AN4ZH;EM7ZI,YAAU,EACX;;AN+ZH;EMhaI,YAAU,EACX;;ANkaH;EMnaI,YAAU,EACX;;ANqaH;EMtaI,YAAU,EACX;;ANwaH;EMzaI,YAAU,EACX;;AN2aH;EM5aI,YAAU,EACX;;AN8aH;EM/aI,YAAU,EACX;;ANibH;EMlbI,YAAU,EACX;;ANobH;EMrbI,YAAU,EACX;;ANubH;EMxbI,YAAU,EACX;;AN0bH;EM3bI,YAAU,EACX;;AN6bH;EM9bI,YAAU,EACX;;ANgcH;EMjcI,aAAU,EACX;;AAGH;EACE,0BIMoB,EJLrB;;AAED;EC+DE,0BCjLY;EDkLZ,YCnLsB;EFqHtB,uBErHsB;EFsHtB,0BIAoB;EJCpB,+BIDoB;EJEpB,mBAAmB;EACnB,sBAAsB;EACtB,YAAY,EAab;EApBD;IAUI,0BWtFS;IXuFT,gCE9HoB,EF+HrB;EAZH;;;IAiBI,eAAe;IACf,2BAA2B,EAC5B;;AAGH;EU5FE,sBNyEoB;EMxEpB,wBARqC;EVqGrC,eAAe;EACf,mBAAmB;EACnB,uBIvBoB;EJwBpB,oBIxBoB;EJyBpB,mBAAmB,EACpB","file":"style.css","sourcesContent":["// Root Init\n// =========\n\n\n// Prevent iOS and IE text size adjust after device orientation change\n// (overflow-style: Edge 12+, Internet Explorer 11-)\n/// @group general\nhtml {\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n  text-size-adjust: 100%;\n}\n\n\n/// Android 4.3-, Internet Explorer 11-, Windows Phone 8.1+\n/// @group general\nmain {\n  display: block;\n}\n\n\n/// Edge 12+, Firefox 40+, Internet Explorer 11-, Windows Phone 8.1+\n/// @group general\ndetails {\n  display: block;\n}\n\n\n/// Internet Explorer 11-\n/// @group general\npre {\n  overflow: auto;\n}\n\n\n/// Internet Explorer 11-, Windows Phone 8.1+\n/// @group general\nprogress {\n  display: inline-block;\n}\n\n\n/// Firefox 40+, Internet Explorer 11-, Windows Phone 8.1+\n/// @group general\nsummary {\n  display: block;\n}\n\n\n/// Android 4.3-, Internet Explorer 11-, iOS 7-, Safari 7-, Windows Phone 8.1+\n/// @group general\ntemplate {\n  display: none;\n}\n\n\n/// Specify the border style, width, and box-sizing of all elements\n/// @group general\n*,\n::before,\n::after {\n  border-style: solid;\n  border-width: 0;\n  box-sizing: border-box;\n}\n\n\n/// Specify the core styles of all elements\n/// @group general\n* {\n  font-size: inherit;\n  line-height: inherit;\n  margin: 0;\n  padding: 0;\n}\n\n\n/// Specify the border styling of tables\n/// @group general\ntable {\n  border-collapse: collapse;\n  border-spacing: 0;\n}\n","// Accessibility Init\n// ==================\n\n\n/// Chrome 44-, iOS 8+, Safari 9+\n/// @group a11y\naudio {\n  :not([controls]) {\n    display: none;\n  }\n}\n\n\n/// Specify the progress cursor of updating elements\n/// @group a11y\n[aria-busy='true'] {\n  cursor: progress;\n}\n\n\n/// Specify the pointer cursor of trigger elements\n/// @group a11y\n[aria-controls] {\n  cursor: pointer;\n}\n\n\n/// Specify the unstyled cursor of disabled,\n/// not-editable, or otherwise inoperable elements\n/// @group a11y\n[aria-disabled] {\n  cursor: default;\n}\n\n\n/// Internet Explorer 10-\n/// @group a11y\n[hidden] {\n  display: none;\n}\n","html {\n  -ms-overflow-style: -ms-autohiding-scrollbar;\n  text-size-adjust: 100%; }\n\nmain {\n  display: block; }\n\ndetails {\n  display: block; }\n\npre {\n  overflow: auto; }\n\nprogress {\n  display: inline-block; }\n\nsummary {\n  display: block; }\n\ntemplate {\n  display: none; }\n\n*,\n::before,\n::after {\n  border-style: solid;\n  border-width: 0;\n  box-sizing: border-box; }\n\n* {\n  font-size: inherit;\n  line-height: inherit;\n  margin: 0;\n  padding: 0; }\n\ntable {\n  border-collapse: collapse;\n  border-spacing: 0; }\n\naudio :not([controls]) {\n  display: none; }\n\n[aria-busy='true'] {\n  cursor: progress; }\n\n[aria-controls] {\n  cursor: pointer; }\n\n[aria-disabled] {\n  cursor: default; }\n\n[hidden] {\n  display: none; }\n\nbutton {\n  overflow: visible; }\n\ninput {\n  border-radius: 0;\n  line-height: normal; }\n\nbutton,\n[type='button'],\n[type='reset'],\n[type='submit'] {\n  appearance: button;\n  cursor: pointer; }\n  button::-moz-focus-inner,\n  [type='button']::-moz-focus-inner,\n  [type='reset']::-moz-focus-inner,\n  [type='submit']::-moz-focus-inner {\n    border: 0 none !important;\n    padding: 0 !important; }\n\n[type='checkbox'],\n[type='radio'] {\n  box-sizing: border-box;\n  padding: 0; }\n\n[type='number'] {\n  width: auto; }\n\n[type='search'] {\n  appearance: textfield; }\n\nbutton,\ninput,\nselect,\ntextarea {\n  background-color: transparent;\n  color: inherit;\n  font-family: inherit;\n  font-style: inherit;\n  font-weight: inherit; }\n\ntextarea {\n  overflow: auto;\n  resize: vertical; }\n\nimg {\n  border: 0; }\n\nsvg:not(:root) {\n  overflow: hidden; }\n\naudio,\ncanvas,\niframe,\nimg,\nsvg,\nvideo {\n  max-width: 100%;\n  vertical-align: middle; }\n\na {\n  background-color: transparent; }\n  a:active, a:hover {\n    outline: 0; }\n\nabbr[title] {\n  border-bottom: 1px dotted; }\n\nb,\nstrong {\n  font-weight: bold; }\n\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace;\n  font-size: inherit; }\n\ndfn {\n  font-style: italic; }\n\nnav ol,\nnav ul {\n  list-style: none; }\n\nsmall {\n  font-size: 0.75em; }\n\nsub,\nsup {\n  font-size: 0.75em;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline; }\n\nsup {\n  top: -0.5em; }\n\nsub {\n  bottom: -0.25em; }\n\n@font-face {\n  font-family: \"BaskervilleFS\";\n  font-style: normal;\n  font-weight: normal;\n  src: url(\"fonts/baskerville-regular-webfont.woff2\") format(\"woff2\"), url(\"fonts/baskerville-regular-webfont.woff\") format(\"woff\"), url(\"fonts/baskerville-regular-webfont.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"BaskervilleFS\";\n  font-style: italic;\n  font-weight: normal;\n  src: url(\"fonts/baskerville-italic-webfont.woff2\") format(\"woff2\"), url(\"fonts/baskerville-italic-webfont.woff\") format(\"woff\"), url(\"fonts/baskerville-italic-webfont.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"BaskervilleFS\";\n  font-style: normal;\n  font-weight: bold;\n  src: url(\"fonts/baskerville-bold-webfont.woff2\") format(\"woff2\"), url(\"fonts/baskerville-bold-webfont.woff\") format(\"woff\"), url(\"fonts/baskerville-bold-webfont.ttf\") format(\"truetype\"); }\n\n@font-face {\n  font-family: \"BaskervilleFS\";\n  font-style: italic;\n  font-weight: bold;\n  src: url(\"fonts/baskerville-bolditalic-webfont.woff2\") format(\"woff2\"), url(\"fonts/baskerville-bolditalic-webfont.woff\") format(\"woff\"), url(\"fonts/baskerville-bolditalic-webfont.ttf\") format(\"truetype\"); }\n\n:root {\n  background-color: #111;\n  color: #eee;\n  font-family: \"BaskervilleFS\", Baskerville, Palatino, Cambria, Georgia, serif;\n  font-size: 1rem;\n  font-size: calc(110% + 0.5vw);\n  line-height: 1.375; }\n\nh1 {\n  font-size: 1.61111rem;\n  font-size: calc(100% + 2vw); }\n\na:link, a:visited {\n  color: #7a0052; }\n\na:hover, a:focus, a:active {\n  text-decoration: none; }\n\nhtml {\n  align-items: center;\n  border: 10vmin solid gold;\n  border-image: url(\"images/frame.png\") 185 226 round;\n  background: url(\"images/canvas.jpg\") no-repeat fixed center;\n  background-size: cover;\n  height: 100%;\n  overflow: hidden;\n  position: relative; }\n  @media (min-width: 33.75em) {\n    html {\n      border-width: 15vmin; } }\n\nbody {\n  height: 100%;\n  overflow-x: hidden;\n  overflow-y: auto;\n  width: 100%; }\n  body:after {\n    clear: both;\n    content: ' ';\n    display: block; }\n\naside {\n  bottom: 0;\n  left: 0;\n  position: absolute;\n  top: 0;\n  box-shadow: 0 0 0.34722rem #111 inset;\n  background-image: repeating-linear-gradient(45deg, rgba(17, 17, 17, 0.75) 0, rgba(17, 17, 17, 0.75) 4px, #7a0052 4px, #7a0052 6px);\n  width: 24vmin; }\n\nheader,\nmain {\n  margin-left: 24vmin;\n  padding: 0.69444rem 5vmin; }\n\n.money {\n  left: 0;\n  position: absolute;\n  right: 0;\n  top: 0;\n  padding: 0.34722rem;\n  text-align: center; }\n  .money .current,\n  .money .whatever,\n  .money .goal {\n    background: linear-gradient(to top, rgba(17, 17, 17, 0.75) 75%, transparent 75%);\n    display: inline-block;\n    text-shadow: 0 0 0.34722rem #111; }\n  .money .current,\n  .money .goal {\n    font-weight: bold; }\n    .money .current:before,\n    .money .goal:before {\n      content: \"$\"; }\n  .money .whatever {\n    font-size: 0.72222rem;\n    line-height: 1.38889rem;\n    font-style: italic; }\n\n[data-percent] {\n  bottom: 0;\n  left: 0;\n  position: absolute;\n  right: 0;\n  background: url(\"images/paint.jpg\") no-repeat scroll;\n  background-size: cover;\n  box-shadow: 0 0 0.34722rem #111 inset; }\n\n[data-percent='1'] {\n  height: 1%; }\n\n[data-percent='2'] {\n  height: 2%; }\n\n[data-percent='3'] {\n  height: 3%; }\n\n[data-percent='4'] {\n  height: 4%; }\n\n[data-percent='5'] {\n  height: 5%; }\n\n[data-percent='6'] {\n  height: 6%; }\n\n[data-percent='7'] {\n  height: 7%; }\n\n[data-percent='8'] {\n  height: 8%; }\n\n[data-percent='9'] {\n  height: 9%; }\n\n[data-percent='10'] {\n  height: 10%; }\n\n[data-percent='11'] {\n  height: 11%; }\n\n[data-percent='12'] {\n  height: 12%; }\n\n[data-percent='13'] {\n  height: 13%; }\n\n[data-percent='14'] {\n  height: 14%; }\n\n[data-percent='15'] {\n  height: 15%; }\n\n[data-percent='16'] {\n  height: 16%; }\n\n[data-percent='17'] {\n  height: 17%; }\n\n[data-percent='18'] {\n  height: 18%; }\n\n[data-percent='19'] {\n  height: 19%; }\n\n[data-percent='20'] {\n  height: 20%; }\n\n[data-percent='21'] {\n  height: 21%; }\n\n[data-percent='22'] {\n  height: 22%; }\n\n[data-percent='23'] {\n  height: 23%; }\n\n[data-percent='24'] {\n  height: 24%; }\n\n[data-percent='25'] {\n  height: 25%; }\n\n[data-percent='26'] {\n  height: 26%; }\n\n[data-percent='27'] {\n  height: 27%; }\n\n[data-percent='28'] {\n  height: 28%; }\n\n[data-percent='29'] {\n  height: 29%; }\n\n[data-percent='30'] {\n  height: 30%; }\n\n[data-percent='31'] {\n  height: 31%; }\n\n[data-percent='32'] {\n  height: 32%; }\n\n[data-percent='33'] {\n  height: 33%; }\n\n[data-percent='34'] {\n  height: 34%; }\n\n[data-percent='35'] {\n  height: 35%; }\n\n[data-percent='36'] {\n  height: 36%; }\n\n[data-percent='37'] {\n  height: 37%; }\n\n[data-percent='38'] {\n  height: 38%; }\n\n[data-percent='39'] {\n  height: 39%; }\n\n[data-percent='40'] {\n  height: 40%; }\n\n[data-percent='41'] {\n  height: 41%; }\n\n[data-percent='42'] {\n  height: 42%; }\n\n[data-percent='43'] {\n  height: 43%; }\n\n[data-percent='44'] {\n  height: 44%; }\n\n[data-percent='45'] {\n  height: 45%; }\n\n[data-percent='46'] {\n  height: 46%; }\n\n[data-percent='47'] {\n  height: 47%; }\n\n[data-percent='48'] {\n  height: 48%; }\n\n[data-percent='49'] {\n  height: 49%; }\n\n[data-percent='50'] {\n  height: 50%; }\n\n[data-percent='51'] {\n  height: 51%; }\n\n[data-percent='52'] {\n  height: 52%; }\n\n[data-percent='53'] {\n  height: 53%; }\n\n[data-percent='54'] {\n  height: 54%; }\n\n[data-percent='55'] {\n  height: 55%; }\n\n[data-percent='56'] {\n  height: 56%; }\n\n[data-percent='57'] {\n  height: 57%; }\n\n[data-percent='58'] {\n  height: 58%; }\n\n[data-percent='59'] {\n  height: 59%; }\n\n[data-percent='60'] {\n  height: 60%; }\n\n[data-percent='61'] {\n  height: 61%; }\n\n[data-percent='62'] {\n  height: 62%; }\n\n[data-percent='63'] {\n  height: 63%; }\n\n[data-percent='64'] {\n  height: 64%; }\n\n[data-percent='65'] {\n  height: 65%; }\n\n[data-percent='66'] {\n  height: 66%; }\n\n[data-percent='67'] {\n  height: 67%; }\n\n[data-percent='68'] {\n  height: 68%; }\n\n[data-percent='69'] {\n  height: 69%; }\n\n[data-percent='70'] {\n  height: 70%; }\n\n[data-percent='71'] {\n  height: 71%; }\n\n[data-percent='72'] {\n  height: 72%; }\n\n[data-percent='73'] {\n  height: 73%; }\n\n[data-percent='74'] {\n  height: 74%; }\n\n[data-percent='75'] {\n  height: 75%; }\n\n[data-percent='76'] {\n  height: 76%; }\n\n[data-percent='77'] {\n  height: 77%; }\n\n[data-percent='78'] {\n  height: 78%; }\n\n[data-percent='79'] {\n  height: 79%; }\n\n[data-percent='80'] {\n  height: 80%; }\n\n[data-percent='81'] {\n  height: 81%; }\n\n[data-percent='82'] {\n  height: 82%; }\n\n[data-percent='83'] {\n  height: 83%; }\n\n[data-percent='84'] {\n  height: 84%; }\n\n[data-percent='85'] {\n  height: 85%; }\n\n[data-percent='86'] {\n  height: 86%; }\n\n[data-percent='87'] {\n  height: 87%; }\n\n[data-percent='88'] {\n  height: 88%; }\n\n[data-percent='89'] {\n  height: 89%; }\n\n[data-percent='90'] {\n  height: 90%; }\n\n[data-percent='91'] {\n  height: 91%; }\n\n[data-percent='92'] {\n  height: 92%; }\n\n[data-percent='93'] {\n  height: 93%; }\n\n[data-percent='94'] {\n  height: 94%; }\n\n[data-percent='95'] {\n  height: 95%; }\n\n[data-percent='96'] {\n  height: 96%; }\n\n[data-percent='97'] {\n  height: 97%; }\n\n[data-percent='98'] {\n  height: 98%; }\n\n[data-percent='99'] {\n  height: 99%; }\n\n[data-percent='100'] {\n  height: 100%; }\n\np {\n  margin-bottom: 1.38889rem; }\n\nbutton {\n  background-color: #7a0052;\n  color: #eee;\n  border: 2px solid #eee;\n  border-radius: 0.34722rem;\n  padding: 0.69444rem 1.38889rem;\n  text-align: center;\n  transition: all 150ms;\n  width: 100%; }\n  button:hover, button:focus, button:active {\n    background-color: #680045;\n    box-shadow: 0 0 0.69444rem #eee; }\n  button b,\n  button strong,\n  button .whatever {\n    display: block;\n    text-transform: capitalize; }\n\nsmall {\n  font-size: 0.72222rem;\n  line-height: 1.04167rem;\n  display: block;\n  font-style: italic;\n  margin-top: 1.38889rem;\n  padding: 0.69444rem;\n  text-align: center; }\n","// Forms Init\n// ==========\n\n\n/// Internet Explorer 11-\n/// @group forms\nbutton {\n  overflow: visible;\n}\n\n\n/// border-radius: iOS 8+ |\n/// line-height: Firefox 4+\n/// @group forms\ninput {\n  border-radius: 0;\n  line-height: normal;\n}\n\n\n/// appearance, cursors, and inner-focus\n/// for buttons and button-like inputs\n/// (appearance: iOS 8+)\n/// @group forms\nbutton,\n[type='button'],\n[type='reset'],\n[type='submit'] {\n  appearance: button;\n  cursor: pointer;\n\n  &::-moz-focus-inner {\n    border: 0 none !important;\n    padding: 0 !important;\n  }\n}\n\n\n/// Address box sizing set to `content-box` in IE 8/9/10.\n/// Remove excess padding in IE 8/9/10.\n/// @group forms\n[type='checkbox'],\n[type='radio'] {\n  box-sizing: border-box;\n  padding: 0;\n}\n\n\n/// Firefox 36+\n/// @group forms\n[type='number'] {\n  width: auto;\n}\n\n\n/// Chrome 45+, Safari 9+\n/// @group forms\n[type='search'] {\n  appearance: textfield;\n}\n\n\n/// Specify the background-color,\n/// and the inherited color/font of form elements\n/// @group forms\nbutton,\ninput,\nselect,\ntextarea {\n  background-color: transparent;\n  color: inherit;\n  font-family: inherit;\n  font-style: inherit;\n  font-weight: inherit;\n}\n\n\n/// Remove default vertical scrollbar in IE 8/9/10/11,\n/// and specify the resizability of textareas\n/// @group forms\ntextarea {\n  overflow: auto;\n  resize: vertical;\n}\n","// Media Init\n// ==========\n\n\n/// Remove border when inside `a` element in IE 8/9/10.\n/// @group media\nimg {\n  border: 0;\n}\n\n\n/// Internet Explorer 11-\n/// @group media\nsvg {\n  &:not(:root) {\n    overflow: hidden;\n  }\n}\n\n\n/// Specify the alignment of media elements\n/// @group media\naudio,\ncanvas,\niframe,\nimg,\nsvg,\nvideo {\n  max-width: 100%;\n  vertical-align: middle;\n}\n","// Typography Init\n// ===============\n\n\n/// Remove the gray background color from active links in IE 10.\n/// Improve readability of focused elements\n/// when they are also in an active/hover state.\n/// @group type\na {\n  background-color: transparent;\n\n  &:active,\n  &:hover {\n    outline: 0;\n  }\n}\n\n\n/// Address styling not present in IE 8/9/10/11, Safari, and Chrome.\n/// @group type\nabbr {\n  &[title] {\n    border-bottom: 1px dotted;\n  }\n}\n\n\n/// Address style set to `bolder` in Firefox 4+, Safari, and Chrome.\n/// @group type\nb,\nstrong {\n  font-weight: bold;\n}\n\n\n/// specify the font family of code elements\n/// @group type\ncode,\nkbd,\npre,\nsamp {\n  font-family: monospace;\n  font-size: inherit;\n}\n\n\n/// Address styling not present in Safari and Chrome.\n/// @group type\ndfn {\n  font-style: italic;\n}\n\n\n/// Remove list style of nav lists\n/// @group type\nnav {\n  ol,\n  ul {\n    list-style: none;\n  }\n}\n\n\n/// All browsers\n/// @group type\nsmall {\n  font-size: 0.75em;\n}\n\n\n/// Prevent `sub` and `sup` affecting `line-height` in all browsers.\n/// @group type\nsub,\nsup {\n  font-size: 0.75em;\n  line-height: 0;\n  position: relative;\n  vertical-align: baseline;\n}\n\n\n/// Move super-script up\n/// @group type\nsup {\n  top: -0.5em;\n}\n\n\n/// Move sub-script down\n/// @group type\nsub {\n  bottom: -0.25em;\n}\n","// Internal Font Helpers\n// =====================\n\n$_font-style-options: 'italic' 'oblique';\n$_font-weight-options: 100 200 300 400 500 600 700 800 900 'bold';\n$_font-format-options: (\n  'ttf': 'truetype',\n  'otf': 'opentype',\n  'woff': 'woff',\n  'woff2': 'woff2',\n  'svg': 'svg',\n  'svgz': 'svg',\n  'eot': 'embedded-opentype',\n);\n\n\n// Font Get\n// --------\n/// Get a font from the `$fonts` map.\n/// @access private\n@function _font-get(\n  $key\n) {\n  $font: map-get($fonts, $key);\n\n  @if not $font {\n    @error '#{$key} is not defined in your `$fonts` configuration map.';\n  } @else if map-has-key($fonts, $font) {\n    $font: _font-get($font);\n  }\n\n  @return $font;\n}\n\n\n// Font Src\n// --------\n/// Get the font `src` value for a given font path and format.\n/// @access private\n@function _font-src(\n  $path,\n  $format,\n  $suffix: ''\n) {\n  $url: $path + '.' + $format + $suffix;\n  $format: map-get($_font-format-options, $format);\n\n  @return font-url($url) format($format);\n}\n\n\n// Parse Font Variant\n// -------------------\n/// Parse a list of font variants into a map of styles and weights.\n/// @access private\n/// @param {List} $variant -\n///   A list of font variants, such as `('bold', 'italic')`.\n/// @return {$map} -\n///   A map of `style` and `weight` values.\n@function _parse-font-variant(\n  $variant\n) {\n  $return: (\n    'style': 'normal',\n    'weight': 'normal',\n  );\n\n  @each $item in $variant {\n    @if index($_font-style-options, $item) {\n      $return: map-merge($return, ('style': $item));\n    } @else if index($_font-weight-options, $item) {\n      $return: map-merge($return, ('weight': $item));\n    }\n  }\n\n  @return $return;\n}\n\n\n// Import Font-Face [mixin]\n// ------------------------\n/// A wrapper utility for the CSS `@font-face` block.\n/// @access private\n/// @param {String} $name -\n///   The font name.\n/// @param {String} $path -\n///   Path to the font files (leaving off the file format indicator).\n/// @param {String | List} $variant [('normal', 'normal')] -\n///   The font-style and font-weight properties.\n/// @param {List} $formats -\n///   The font formats (e.g. 'ttf', 'otf', 'woff') to import.\n///   Font files will be imported in the order given.\n@mixin _import-font-face(\n  $name,\n  $path,\n  $variant: ('normal', 'normal'),\n  $formats: $font-formats\n) {\n  $variant: _parse-font-variant($variant);\n  $src: ();\n\n  @each $format in $formats {\n    $suffix: '';\n\n    @if ($format == 'eot') {\n      $suffix: '?#iefix';\n    } @else if index(('svg', 'svgz'), $format) {\n      $suffix: '#' + $name;\n    }\n\n    $item: _font-src($path, $format, $suffix);\n    $src: append($src, $item, 'comma');\n  }\n\n  @font-face {\n    font-family: quote($name);\n    font-style: unquote(map-get($variant, 'style'));\n    font-weight: unquote(map-get($variant, 'weight'));\n\n    @if index($formats, 'eot') {\n      // IE9 compat mode (eot)\n      src: _font-src($path, 'eot');\n    }\n\n    // IE6-IE8 (eot) - with '?#iefix'\n    // Modern Browsers (woff, woff2)\n    // Safari, Android, iOS (ttf, otf)\n    // Legacy iOS (svg, svgz) - with '#svgName'\n    src: $src;\n  }\n}\n","// Font Settings\n// =============\n\n@import '../../node_modules/accoutrement-type/sass/type';\n\n\n// Links\n// -----\n\n$link: '&:link, &:visited';\n$focus: '&:hover, &:focus, &:active';\n\n\n// Fonts\n// -----\n\n$font-formats: 'woff2' 'woff' 'ttf';\n$font-path: 'fonts/';\n\n$serif-font: (\n  'name': 'BaskervilleFS',\n  'stack': (Baskerville, Palatino, Cambria, Georgia, serif),\n  'regular': 'baskerville-regular-webfont',\n  'italic': 'baskerville-italic-webfont',\n  'bold': 'baskerville-bold-webfont',\n  'bold' 'italic': 'baskerville-bolditalic-webfont',\n);\n\n$fonts: (\n  'body': $serif-font,\n);\n","// BuntMoney\n// =========\n\n\n@import 'config/manifest';\n@import '../node_modules/accoutrement-init/sass/init';\n\n\n// Root\n// ----\n\n@include import-webfonts;\n\n:root {\n  @include contrasted('background');\n  @include font-family('body');\n  font-size: size('root');\n  font-size: calc(110% + 0.5vw);\n  line-height: map-get($ratios, 'buntpress');\n}\n\nh1 {\n  font-size: size('large');\n  font-size: calc(100% + 2vw);\n}\n\na {\n  #{$link} {\n    color: color('action');\n  }\n\n  #{$focus} {\n    text-decoration: none;\n  }\n}\n\n$graph-size: 24vmin;\n\n\n// layout\n// ------\n\nhtml {\n  align-items: center;\n  border: 10vmin solid gold;\n  border-image: url('images/frame.png') 185 226 round;\n  background: url('images/canvas.jpg') no-repeat fixed center;\n  background-size: cover;\n  height: 100%;\n  overflow: hidden;\n  position: relative;\n\n  @include above('page') {\n    border-width: 15vmin;\n  }\n}\n\nbody {\n  @include clearfix;\n  height: 100%;\n  overflow-x: hidden;\n  overflow-y: auto;\n  width: 100%;\n}\n\naside {\n  @include stretch(0, null, 0, 0);\n  box-shadow: 0 0 size('half-shim') color('background') inset;\n  background-image: repeating-linear-gradient(45deg, color('overlay') 0, color('overlay') 4px, color('red') 4px, color('red') 6px);\n  width: $graph-size;\n}\n\nheader,\nmain {\n  margin-left: $graph-size;\n  padding: size('shim') 5vmin;\n}\n\n\n// Main\n// ----\n\n.money {\n  @include stretch(0, 0, null, 0);\n  padding: size('half-shim');\n  text-align: center;\n\n  .current,\n  .whatever,\n  .goal {\n    background: linear-gradient(to top, color('overlay') 75%, transparent 75%);\n    display: inline-block;\n    text-shadow: 0 0 size('half-shim') color('background');\n  }\n\n  .current,\n  .goal {\n    @include before('$');\n    font-weight: bold;\n  }\n\n  .whatever {\n    @include font-size('small');\n    font-style: italic;\n  }\n}\n\n[data-percent] {\n  @include stretch(null, 0, 0, 0);\n  background: url('images/paint.jpg') no-repeat scroll;\n  background-size: cover;\n  box-shadow: 0 0 size('half-shim') color('background') inset;\n}\n\n@for $i from 1 through 100 {\n  [data-percent='#{$i}'] {\n    height: $i * 1%;\n  }\n}\n\np {\n  margin-bottom: size('gutter');\n}\n\nbutton {\n  @include contrasted('action');\n  border: 2px solid contrast('action');\n  border-radius: size('half-shim');\n  padding: size('shim') size('gutter');\n  text-align: center;\n  transition: all 150ms;\n  width: 100%;\n\n  #{$focus} {\n    background-color: color('action' ('shade': 15%));\n    box-shadow: 0 0 size('shim') contrast('background');\n  }\n\n  b,\n  strong,\n  .whatever {\n    display: block;\n    text-transform: capitalize;\n  }\n}\n\nsmall {\n  @include font-size('small', 0.75);\n  display: block;\n  font-style: italic;\n  margin-top: size('gutter');\n  padding: size('shim');\n  text-align: center;\n}\n","// Color Contrast\n// ==============\n\n\n// WCAG Contrast\n// -------------\n/// Contrast ratios from the WCAG.\n/// @access private\n$wcag-contrast: (\n  'aa-large': 3,\n  'aa': 4.5,\n  'aaa': 7,\n);\n\n\n// Luminance\n// ---------\n/// Get the WCAG luminance of a color in your palette.\n/// **Warning**: Calculating luminance requires a `pow()` function\n/// like the one available in\n/// [MathSass](https://github.com/terkel/mathsass/blob/master/dist/functions/_pow.scss),\n/// which is not included in this library.\n///\n/// @group contrast\n/// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#relativeluminancedef\n///\n/// @param {String | list} $color -\n///   The name of a color in your palette,\n///   with optional adjustments in the form of `(<function-name>: <args>)`.\n@function luminance(\n  $color\n) {\n  $color: color($color);\n  $luminance: 0;\n\n  @if not function-exists('pow') {\n    @error 'Luminance and contrast calculations require a `pow()` function '\n    + 'like the one available from MathSass.';\n  }\n\n  @if (type-of($color) != 'color') {\n    @error '`#{$color}` is not a color.';\n  }\n\n  @each $component in 'red' 'green' 'blue' {\n    $value: call($component, $color) / 255;\n\n    @if ($value < 0.03928) {\n      $value: $value / 12.92;\n    } @else {\n      $value: pow((($value + 0.055) / 1.055), 2.4);\n    }\n\n    @if ($component == 'red') {\n      $value: $value * 0.2126;\n    } @else if ($component == 'green') {\n      $value: $value * 0.7152;\n    } @else {\n      $value: $value * 0.0722;\n    }\n\n    $luminance: $luminance + $value;\n  }\n\n  @return $luminance;\n}\n\n\n// Contrast Ratio\n// --------------\n/// Get the WCAG contrast-ratio between any two colors in your palette.\n///\n/// @group contrast\n/// @link http://www.w3.org/TR/2008/REC-WCAG20-20081211/#contrast-ratiodef\n///\n/// @param {string | list | number} $color -\n///   The name of a color in your palette,\n///   with optional adjustments in the form of `(<function-name>: <args>)`,\n///   or a pre-calculated luminance.\n/// @param {string | list | number} $contrast -\n///   The name of a color to contrast against the first,\n///   with optional adjustments in the form of `(<function-name>: <args>)`,\n///   or a pre-calculated luminance.\n/// @param {'aa' | 'aa-large' | 'aaa' | Number | false} $require [false] -\n///   An optional contrast ratio to require.\n///   The function will throw a warning if the required ratio is not met.\n@function contrast-ratio(\n  $base,\n  $contrast,\n  $require: false\n) {\n  $is-lumins: (type-of($base) == 'number');\n\n  $base-lumin: if($is-lumins, $base, luminance($base));\n  $contrast-lumin: if($is-lumins, $contrast, luminance($contrast));\n\n  $darker: min($base-lumin, $contrast-lumin);\n  $lighter: max($base-lumin, $contrast-lumin);\n\n  $ratio: ($lighter + 0.05) / ($darker + 0.05);\n  $require: map-get($wcag-contrast, $require) or $require;\n\n  @if $require and ($ratio < $require) {\n    @warn 'The contrast ratio between `#{$base}` and `#{$contrast}` is '\n    + '#{$ratio}, but a ratio of #{$require} or more is required.';\n  }\n\n  @return $ratio;\n}\n\n\n// Contrast\n// --------\n/// For any color, select the best contrast among a set of options.\n/// For best results, pass a combination of light and dark colors\n/// to contrast against.\n///\n/// @group contrast\n///\n/// @param {String | list} $color -\n///   The name of a color in your palette,\n///   with optional adjustments in the form of `(<function-name>: <args>)`.\n/// @param {Arglist} $options [#000, #fff] -\n///   Colors to contrast against.\n///   Will use `contrast-light` and `contrast-dark` as defaults\n///   if they are defined in your color palette.\n/// @return {Color} -\n///   Whichever option has the highest contrast-ratio to `$color`.\n@function contrast(\n  $color,\n  $options...\n) {\n  // Establish default options if they are missing\n  @if length($options) == 0 {\n    $options: append($options, map-get($colors, 'contrast-light') or #fff);\n    $options: append($options, map-get($colors, 'contrast-dark') or #000);\n  } @else if length($options) == 1 {\n    @error 'Provide at least two contrasting color options for `contrast()`';\n  }\n\n  // Get the colors and their contrasts\n  $color-val: color($color);\n  $color-lum: luminance($color-val);\n  $color-list: ();\n  $contrast-list: ();\n\n  @each $item in $options {\n    $item: color($item);\n    $luminance: luminance($item);\n    $contrast: contrast-ratio($color-lum, $luminance);\n\n    $color-list: append($color-list, $item);\n    $contrast-list: append($contrast-list, $contrast);\n  }\n\n  // Find the best results\n  $best-ratio: max($contrast-list...);\n  $best-color: nth($color-list, index($contrast-list, $best-ratio));\n\n  @return $best-color;\n}\n\n\n// Contrasted\n// ----------\n/// For any background color,\n/// select the best contrasting text color among a set of options.\n/// For best results, pass a combination of light and dark colors\n/// to contrast against.\n///\n/// @group contrast\n///\n/// @param {String | list} $background -\n///   The name of a color in your palette,\n///   with optional adjustments in the form of `(<function-name>: <args>)`.\n/// @param {Arglist} $options -\n///   Colors to contrast against.\n/// @output -\n///   Sets the `background-color` to `$background`\n///   and the foreground `color` to\n///   whichever option has better contrast against the given background.\n@mixin contrasted(\n  $background,\n  $options...\n) {\n  $background: color($background);\n\n  background-color: $background;\n  color: contrast($background, $options...);\n}\n","// Color Settings\n// ==============\n\n@import '../../node_modules/accoutrement-color/sass/color';\n@import '../../node_modules/mathsass/dist/math';\n\n\n$colors: (\n  'contrast-dark': #111,\n  'contrast-light': #eee,\n  'brand': hsl(320, 100%, 24%),\n\n  'background': 'contrast-dark',\n  'text': 'contrast-light',\n\n  'overlay': 'background' ('rgba': 0.75),\n  'red': 'brand',\n\n  'action': 'brand',\n  'focus': 'action' ('shade': 15%),\n\n  'border': 'text-light',\n);\n","// Fonts API\n// =========\n\n\n// Font Formats\n// ------------\n/// The file formats to include when importing a font-face.\n/// @group config\n/// @type List\n$font-formats: 'woff' 'ttf' !default;\n\n\n// Font Path\n// ---------\n/// The path to your fonts directory,\n/// often relative to your output CSS.\n/// @group config\n/// @type String\n$font-path: '../fonts/' !default;\n\n\n// Fonts\n// -----\n/// A map for managing all your fonts on a project.\n/// @group config\n/// @type Map\n/// @example scss -\n///   $fonts: (\n///     'sans': (\n///       'name': 'FranklinGothic',\n///       'stack': ('Helvetica', 'Arial', 'sans-serif'),\n///       'regular': 'franklingothic-regular-filename',\n///       'bold': 'franklingothic-bold-filename',\n///       'bold' 'italic': 'franklingothic-bolditalic-filename',\n///     ),\n///   );\n$fonts: () !default;\n\n\n// Font-URL [function]\n// -------------------\n/// Get a CSS-ready URL function (`url('my/path')`) with\n/// the full path to a file in the fonts directory.\n/// @group fonts\n/// @param {String} $path -\n///   A path relative to the fonts directory.\n/// @return {String} -\n///   The full path to a font file, in CSS `url('my/path')` format.\n@function font-url(\n  $path\n) {\n  $full-path: quote($font-path + $path);\n  @return url($full-path);\n}\n\n\n// Font Family [function]\n// ----------------------\n/// Access a font-family from your `$fonts` map.\n/// @group fonts\n/// @param {String} $key -\n///   The key-name of a font in your `$fonts` map.\n/// @return {String} -\n///   The full font-stack for the given font,\n///   ready for output with the `font-family` property.\n@function font-family(\n  $key\n) {\n  $font: map-get($fonts, $key);\n  $name: map-get($font, 'name') or $key;\n  @return join($name, map-get($font, 'stack'), 'comma');\n}\n\n\n// Font Family [mixin]\n// -------------------\n/// Output a font-stack to font-family based on your `$fonts` configuration.\n/// @group fonts\n/// @param {String} $key -\n///   The key-name of a font in your `$fonts` map.\n@mixin font-family(\n  $key\n) {\n  font-family: font-family($key);\n}\n\n\n// Font Face [mixin]\n// -----------------\n/// Import any webfont defined in your `$fonts` configuration.\n/// @group fonts\n/// @param {String} $key -\n///   The key-name of a font in your `$fonts` map.\n/// @param {List} $formats [$font-formats] -\n///   The font file formats (e.g. 'ttf', 'otf', 'woff') to import.\n///   Font files will be imported in the order given.\n@mixin font-face(\n  $key,\n  $formats: $font-formats\n) {\n  $var-options: join($_font-style-options, $_font-weight-options);\n  $var-options: join($var-options, ('normal', 'regular'));\n  $font: _font-get($key);\n  $name: $key;\n  $variants: ();\n\n  @each $key, $value in $font {\n    $first: nth($key, 1);\n\n    @if ($first == 'name') {\n      $name: $value;\n    } @else if index($var-options, $first) {\n      $variants: map-merge($variants, ($key: $value));\n    }\n  }\n\n  @if (length($variants) > 0) {\n    @each $variant, $path in $variants {\n      $variant: if(($variant == 'regular'), 'normal', $variant);\n      @include _import-font-face($name, $path, $variant, $formats);\n    }\n  }\n}\n\n\n// Import WebFonts [mixin]\n// -----------------------\n/// Import webfonts from your font config list.\n/// @group fonts\n/// @param {Map} $fonts [$fonts] -\n///   A map of your font configuration.\n/// @param {List} $formats [$font-formats] -\n///   The font file formats (e.g. 'ttf', 'otf', 'woff') to import.\n///   Font files will be imported in the order given.\n@mixin import-webfonts(\n  $fonts: $fonts,\n  $formats: $font-formats\n) {\n  @each $key, $value in $fonts {\n    @if type-of($value) == 'map' {\n      @include font-face($key, $font-formats);\n    }\n  }\n}\n","// Unit Helpers\n// ------------\n\n\n// Get PX [function]\n// -----------------\n/// If a value can be converted to px by Sass, do it.\n///\n/// @access private\n///\n/// @param {Number} $length -\n///   The number to be converted to px if comparable.\n/// @return {Number | false} -\n///   Either the `px` value of the converted `$length` or `false`.\n@function _get-px(\n  $length\n) {\n  @return if(comparable($length, 1px), 0px + $length, false);\n}\n\n\n// Get Number [function]\n// ---------------------\n/// Get a `0`-value for any absolute unit.\n///\n/// @access private\n///\n/// @param {String} $unit -\n///   The unit to return as a number.\n/// @return {Number | false} -\n///   Either the `0` value of a unit or `false`.\n@function _get-number(\n  $unit\n) {\n  $_absolute: (\n    'in': 0in,\n    'mm': 0mm,\n    'cm': 0cm,\n    'pt': 0pt,\n    'pc': 0pc,\n    'px': 0px,\n  );\n\n  @return map-get($_absolute, $unit) or false;\n}\n\n\n// Convert Length [function]\n// -------------------------\n/// Convert lengths between most units.\n///\n/// @group units\n///\n/// @param {Number} $length -\n///   The length to be converted\n/// @param {String} $to-unit [$default-units] -\n///   The desired units to convert to.\n///   Some units (`ch`, `vw`, `vh`, `vmin`, `vmax`) cannot be converted.\n/// @param {Number} $from-context [$_BROWSER-DEFAULT-FONT-SIZE] -\n///   When converting from relative units,\n///   the absolute length (in px) to which $length refers —\n///   e.g. for `$lengths` in em units, would normally be the\n///   font-size of the current element.\n/// @param {Number} $to-context [$from-context] -\n///   For converting *to* relative units,\n///   the absolute length in px to which the output value will refer.\n///   Defaults to the same as `$from-context`, since it is rarely needed.\n@function convert-units(\n  $length,\n  $to-unit: $default-units,\n  $from-context: $_BROWSER-DEFAULT-FONT-SIZE,\n  $to-context: $from-context\n) {\n  $_convertable: ('in', 'mm', 'cm', 'pt', 'pc', 'px', 'em', 'rem', '%', 'ex');\n  $from-unit: unit($length);\n\n  // Optimize for cases where `from` and `to` units are accidentally the same.\n  @if $from-unit == $to-unit {\n    @return $length;\n  }\n\n  // Warn and escape when units are not convertable\n  @each $units in ($from-unit, $to-unit) {\n    @if not index($_convertable, $units) {\n      @warn '#{$units} units can’t be reliably converted; Returning original value.';\n      @return $length;\n    }\n  }\n\n  // Optomize comparable (non-relative) units\n  $absolute-output: _get-number($to-unit);\n\n  @if $absolute-output and comparable($length, $absolute-output)  {\n    @return $absolute-output + $length;\n  }\n\n  // Establish relative context\n  $root-size: map-get($sizes, 'root') or $_BROWSER-DEFAULT-FONT-SIZE;\n  $from-context: _get-px($from-context);\n  $to-context: _get-px($to-context);\n\n  // Context values must be in px\n  @if (not $from-context) or (not $to-context) {\n    @error 'Context paremeters must resolve to a value in pixel units.';\n  }\n\n  // Convert relative length to pixels\n  $px-length: _get-px($length) or $length;\n  $from-unit: unit($px-length);\n\n  // Convert relative units using the from-context parameter.\n  @if $from-unit == 'em' {\n    $px-length: $length * $from-context / 1em;\n  } @else if $from-unit == 'rem' {\n    $px-length: $length * $root-size / 1rem;\n  } @else if $from-unit == '%' {\n    $px-length: $length * $from-context / 100%;\n  } @else if $from-unit == 'ex'  {\n    $px-length: $length * $from-context / 2ex;\n  }\n\n  // Convert length in pixels to the output unit\n  @if $absolute-output {\n    @return $absolute-output + $px-length;\n  } @else if $to-unit == 'em' {\n    @return $px-length * 1em / $to-context;\n  } @else if $to-unit == 'rem' {\n    @return $px-length * 1rem / $root-size;\n  } @else if $to-unit == '%' {\n    @return $px-length * 100% / $to-context;\n  } @else if $to-unit == 'ex' {\n    @return $px-length * 2ex / $to-context;\n  }\n\n  @error 'Failed to convert #{$length} into #{$to-units}.';\n}\n","// Scale Settings\n// ==============\n\n@import '../../node_modules/accoutrement-scale/sass/scale';\n\n\n$ratios: (\n  'buntpress': 1.375,\n);\n\n$sizes: (\n  'root': 18px,\n  'rhythm': 'root' ('buntpress': 1),\n\n  'large': 'root' ('buntpress': 1.5),\n  'small': 'root' ('buntpress': -1),\n\n  'gutter': 'rhythm',\n  'page': 30rem,\n\n  'shim': 'gutter' ('multiple': 0.5),\n  'half-shim': 'gutter' ('multiple': 0.25),\n);\n","// Media Queries\n// =============\n\n\n\n// Accoutrement Query Context\n// --------------------------\n$accoutrement-query-context: ();\n\n\n\n// Get Breakpoint [function]\n// -------------------------\n@function _get-breakpoint(\n  $break\n) {\n  @if function-exists('browser-ems') {\n    @return browser-ems($break);\n  } @else if function-exists('size') {\n    @return size($break);\n  } @else if variable-exists('sizes') {\n    @return map-get($sizes, $break) or $break;\n  } @else if variable-exists('breakpoints') {\n    $break: map-get($breakpoints, $break) or $break;\n\n    @if map-has-key($breakpoints, $break) {\n      $break: _get-breakpoint($break);\n    }\n  }\n\n  @return $break;\n}\n\n\n\n// Apply Query [mixin]\n// -------------------\n@mixin _apply-query(\n  $name,\n  $query\n) {\n  $context: ($name: $query);\n  $context: map-merge($accoutrement-query-context, $context);\n  $accoutrement-query-context: $context !global;\n\n  @media #{$query} {\n    @content;\n  }\n\n  $accoutrement-query-context: map-remove($accoutrement-query-context, $name) !global;\n}\n\n\n\n// Below [mixin]\n// -------------\n@mixin below(\n  $max,\n  $prop: 'width'\n) {\n  $name: 'below `#{$max}`';\n  $max: _get-breakpoint($max);\n  $query: '(max-#{$prop}: #{$max})';\n\n  @include _apply-query($name, $query) {\n    @content;\n  }\n}\n\n\n\n// Above [mixin]\n// -------------\n@mixin above(\n  $min,\n  $prop: 'width'\n) {\n  $name: 'above `#{$min}`';\n  $min: _get-breakpoint($min);\n  $query: '(min-#{$prop}: #{$min})';\n\n  @include _apply-query($name, $query) {\n    @content;\n  }\n}\n\n\n\n// Between [mixin]\n// ---------------\n@mixin between(\n  $min,\n  $max,\n  $prop: 'width'\n) {\n  $name: 'between `#{$min}` and `#{$max}`';\n  $min: _get-breakpoint($min);\n  $max: _get-breakpoint($max);\n  $query: '(min-#{$prop}: #{$min}) and (max-#{$prop}: #{$max})';\n\n  @include _apply-query($name, $query) {\n    @content;\n  }\n}\n","// Clearfix\n// ========\n\n\n// Micro Clearfix\n// --------------\n/// A small, unobtrusive clearfix for float containers.\n/// @group clearfix\n@mixin micro-clearfix {\n  &:after {\n    clear: both;\n    content: ' ';\n    display: block;\n  }\n}\n\n\n// Cleafix\n// -------\n/// Currently an alias for `micro-clearfix`,\n/// but could be used to choose between clearfix options.\n/// @group clearfix\n/// @alias micro-clearfix\n@mixin clearfix {\n  @include micro-clearfix;\n}\n","// Stretch Utilities\n// =================\n\n\n// Stretch\n// -------\n/// Stretch a positioned element in relation to its context.\n/// @group stretch\n/// @param {Number} $top [0] -\n///   Offset from the top edge.\n/// @param {Number} $right [$top] -\n///   Offset from the right edge.\n/// @param {Number} $bottom [$top] -\n///   Offset from the bottom edge.\n/// @param {Number} $left [$right] -\n///   Offset from the left edge.\n/// @param {absolute | fixed} $position [absolute] -\n///   The type of positioning to use.\n@mixin stretch(\n  $top: 0,\n  $right: $top,\n  $bottom: $top,\n  $left: $right,\n  $position: absolute\n) {\n  bottom: $bottom or null;\n  left: $left or null;\n  position: $position or null;\n  right: $right or null;\n  top: $top or null;\n}\n\n\n// Stretch\n// -------\n/// Stretch a positioned element horizontally in relation to its context.\n/// @group stretch\n/// @param {Number} $left [0] -\n///   Offset from the left edge.\n/// @param {Number} $right [$left] -\n///   Offset from the right edge.\n/// @param {absolute | fixed} $position [absolute] -\n///   The type of positioning to use.\n@mixin stretch-x(\n  $left: 0,\n  $right: $left,\n  $position: absolute\n) {\n  @include stretch(false, $right, false, $left, $position);\n}\n\n\n// Stretch\n// -------\n/// Stretch a positioned element vertically in relation to its context.\n/// @group stretch\n/// @param {Number} $top [0] -\n///   Offset from the top edge.\n/// @param {Number} $bottom [$top] -\n///   Offset from the bottom edge.\n/// @param {absolute | fixed} $position [absolute] -\n///   The type of positioning to use.\n@mixin stretch-y(\n  $top: 0,\n  $bottom: $top,\n  $position: absolute\n) {\n  @include stretch($top, false, $bottom, false, $position);\n}\n","// Pseudo Elements\n// ===============\n\n\n// Before\n// ------\n/// Add generated content `:before` an element.\n/// @group pseudo\n/// @param {String} $content -\n///   A value for the `content` property.\n@mixin before(\n  $content\n) {\n  &:before {\n    content: $content;\n    @content;\n  }\n}\n\n\n// After\n// -----\n/// Add generated content `:after` an element.\n/// @group pseudo\n/// @param {String} $content -\n///   A value for the `content` property.\n@mixin after(\n  $content\n) {\n  &:after {\n    content: $content;\n    @content;\n  }\n}\n\n\n// Wrap Content\n// ------------\n/// Add generated content `:before` and `:after` an element.\n/// @group pseudo\n/// @param {List} $content -\n///   One or two values to be used for the `content` property.\n///   A single string will be used `:before` and `:after`.\n@mixin wrap-content(\n  $content: '“' '”'\n) {\n  $_before: nth($content, 1);\n\n  &:before,\n  &:after {\n    content: $_before;\n    @content;\n  }\n\n  @if length($content) > 1 {\n    &:after { content: nth($content, 2); }\n  }\n}\n","// Type\n// ====\n\n\n// Get Lines [function]\n// --------------------\n/// Determine the number of typographic \"lines\" required\n/// for a given font size and rhythm.\n///\n/// @access private\n///\n/// @param {String | Length | List} $size -\n///   The name, length, or calculations required\n///   for defining the font-size.\n/// @param {String | Length | List} $rhythm -\n///   The name, length, or calculations required\n///   for defining the typographic rhythm.\n@function _get-lines(\n  $size: 'root',\n  $rhythm: 'rhythm'\n) {\n  $font-size: size($size, 'px');\n  $line-height: size($rhythm, 'px');\n\n  @return ceil(2 * $font-size / $line-height) / 2;\n}\n\n\n// Font Size [mixin]\n// -----------------\n/// Set the font-size and line-height of an element\n/// based on size configurations and typographic rhythm.\n///\n/// @group type\n///\n/// @param {String | Length | List} $size -\n///   The name, length, or calculations required\n///   for defining the font-size.\n/// @param {Number} $lines [false] -\n///   Optionally override the number of typographic lines needed.\n/// @output -\n///   Requested `font-size` with appropriate `line-height`.\n@mixin font-size(\n  $size,\n  $lines: false\n) {\n  $rhythm: size('rhythm');\n  $height: ($lines or _get-lines($size)) * $rhythm;\n  $size: size($size);\n\n  @if not $lines and ($size == $height) {\n    $height: $height + ($rhythm / 2);\n  }\n\n  font-size: $size;\n  line-height: $height;\n}\n\n\n// Browser Ems [function]\n// ----------------------\n/// Convert any comparable size into browser-default ems\n/// usable in media-queries.\n///\n/// @group type\n///\n/// @param {String | Length | List} $size -\n///   The name, length, or calculations required\n///   for defining the font-size.\n/// @return {Length} -\n///   The given size, converted to `16px`-based `em` units.\n@function browser-ems(\n  $size\n) {\n  $size: size($size, 'px');\n\n  @return $size / $_BROWSER-DEFAULT-FONT-SIZE * 1em;\n}\n\n\n// Baseline [mixin]\n// ----------------\n/// Set the root font-size as a percentage of the browser default,\n/// along with an appropriate line-height in `em` units.\n///\n/// @group type\n///\n/// @param {String | Length | List} $size ['root'] -\n///   The name, length, or calculations required\n///   for defining the font-size.\n/// @param {String | Length | List} $rhythm ['rhythm'] -\n///   The name, length, or calculations required\n///   for defining the typographic rhythm.\n/// @output -\n///   Requested `font-size` as a percentage of the browser default\n///   with appropriate `line-height` set in `em` units.\n@mixin baseline(\n  $size: 'root',\n  $rhythm: 'rhythm'\n) {\n  $size: size($size, 'px');\n\n  font-size: percentage($size / $_BROWSER-DEFAULT-FONT-SIZE);\n  line-height: size($rhythm, 'em');\n}\n","// Color Utilities\n// ===============\n\n\n// Tint\n// ----\n/// Mix a color with `white` to get a lighter tint.\n///\n/// @group util\n///\n/// @param {String | list} $color -\n///   The name of a color in your palette,\n///   with optional adjustments in the form of `(<function-name>: <args>)`.\n/// @param {Percentage} $percentage -\n///   The percentage of white to mix in.\n///   Higher percentages will result in a lighter tint.\n/// @return {Color} -\n///   A calculated css-ready color-value based on your global color palette.\n@function tint(\n  $color,\n  $percentage\n) {\n  $color: color($color);\n\n  @return mix(#fff, $color, $percentage);\n}\n\n\n// Shade\n// -----\n/// Mix a color with `black` to get a darker shade.\n///\n/// @group util\n///\n/// @param {String | list} $color -\n///   The name of a color in your palette,\n///   with optional adjustments in the form of `(<function-name>: <args>)`.\n/// @param {Percentage} $percentage -\n///   The percentage of black to mix in.\n///   Higher percentages will result in a darker shade.\n/// @return {Color} -\n///   A calculated css-ready color-value based on your global color palette.\n@function shade(\n  $color,\n  $percentage\n) {\n  $color: color($color);\n\n  @return mix(#000, $color, $percentage);\n}\n"],"sourceRoot":"/source/"}